local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("SytroNight v2 Remake", "Luna")

local Credits = window:NewTab("Credits")
local Combat = window:NewTab("Combat")
local Blatant = window:NewTab("Blatant")
local Render = window:NewTab("Render")
local Utility = window:NewTab("Utility")
local World = window:NewTab("World")
local UI = window:NewTab("Ui")

local Credits = Credits:NewSection("Credits")
Credits:NewLabel("Credits UI: Kavo ui")
Credits:NewLabel("Credits InfYield: FlyJump")
Credits:NewLabel("Credits 7GrandDad: Velocity")
Credits:NewLabel("Credits 7GrandDad: CFrame speed")
Credits:NewLabel("Credits Moerii: killaura")
Credits:NewLabel("Credits Moerii: bednuker")
Credits:NewLabel("Special thanks to Moerii: for Killaura")
Credits:NewLabel("Special thanks to Moerii: for BedNuker")
Credits:NewLabel("Made By Vamp,EricSirol,Mrish (me)")


local Reach = Combat:NewSection("Reach")
Reach:NewToggle("Reach", "Extend your attack range", function(state)
	if state then
		CombatConstant.RAYCAST_SWORD_CHARACTER_DISTANCE = (reachval["Value"] - 0.0001)
	else
		CombatConstant.RAYCAST_SWORD_CHARACTER_DISTANCE = 14.4
	end
end)


Reach:NewSlider("Range 18-1", "", 18, 1, function(val) -- 500 (MaxValue) | 0 (MinValue)
	reachval["Value"] = val
end)


local Sprint = Combat:NewSection("Sprint")
Sprint:NewToggle("Sprint", "Automatically on your sprint", function(state)
	if state then
		BindToStepped("Sprint", 1, function()
			if SprintCont.sprinting == false then
				SprintCont:startSprinting()
			end
		end)
	else
		UnbindFromStepped("Sprint")
		SprintCont:stopSprinting()
	end
end)


local NoFall = Combat:NewSection("NoFallDamage")
NoFall:NewToggle("NoFallDamage", "Prevents taking fall damage", function(state)
	if state then
		local NoFall = {["Enabled"] = true}
		local oldfall

		spawn(function()
			repeat task.wait(0.5)
				ClientHandler:Get("GroundHit"):SendToServer()
			until NoFall["Enabled"] == false
		end)
	end
end)


local Velocity = Combat:NewSection("Velocity")
Velocity:NewToggle("Velocity", "Prevents taking a knockback", function(state)
	if state then
		KnockbackTable["kbDirectionStrength"] = 0
		KnockbackTable["kbUpwardStrength"] = 0
	else
		KnockbackTable["kbDirectionStrength"] = 100
		KnockbackTable["kbUpwardStrength"] = 100
	end
end)


local Speed = Blatant:NewSection("Speed")
Speed:NewToggle("CFrame", "", function(state)
	if state then
		BindToStepped("CFrameWalkSpeed", 1, function(time, delta)
			if entity.isAlive then
				local newpos = (lplr.Character.Humanoid.MoveDirection  * (speedval["Value"] - lplr.Character.Humanoid.WalkSpeed)) * delta

				local raycastparameters = RaycastParams.new()
				raycastparameters.FilterDescendantsInstances = {lplr.Character}
				local ray = workspace:Raycast(lplr.Character.HumanoidRootPart.Position, newpos, raycastparameters)
				if ray then newpos = (ray.Position - lplr.Character.HumanoidRootPart.Position) end
				lplr.Character.HumanoidRootPart.CFrame = lplr.Character.HumanoidRootPart.CFrame + newpos
			end
		end)
	else
		UnbindFromStepped("CFrameWalkSpeed")
	end
end)


Speed:NewSlider("Speed 1-42", "Adjust CFrame speed", 42, 1, function(s)
	speedval["Value"] = s
end)


local Aura = Blatant:NewSection("KillAura")
Aura:NewToggle("KillAura", "Autoswing the sword if someone is near you", function(state)
	if state then
		while wait(1/16) do
if state == false then break end
			if entity.isAlive then
				KillauraRemote()
			end
		end
	end
end)


Aura:NewSlider("Distance 1-20", "Increase killaura distance", 20, 1, function(val)
	DistVal["Value"] = val
end)


Aura:NewToggle("No Swing", "Disable killaura swing", function(state)
	if state then
		if killauraswing["Enabled"] == true then
			killauraswing["Enabled"] = false
		end
	else
		if killauraswing["Enabled"] == false then
			killauraswing["Enabled"] = true
		end
	end
end)


Aura:NewSlider("Sound 1-0", "Adjust killaura sound", 1, 0, function(val)
	killaurasoundval["Value"] = val
end)


function blocks(bed)
	local aboveblocks = 0
	local Blocks = getbedsblocks()
	for _,Block in pairs(Blocks) do
		if Block.Position.X == bed.X and Block.Position.Z == bed.Z and Block.Name ~= "bed" and (Block.Position.Y - bed.Y) <= 9 and Block.Position.Y > bed.Y then
			aboveblocks = aboveblocks + 1
		end
	end
	return aboveblocks
end

function nuker()
	local beds = getbeds()
	for _,bed in pairs(beds) do
		local bedmagnitude = (bed.Position - game.Players.LocalPlayer.Character.PrimaryPart.Position).Magnitude
		if bedmagnitude < 27 then
			local upnum = blocks(bed.Position)
			local x = math.round(bed.Position.X/3)
			local y = math.round(bed.Position.Y/3) + upnum
			local z = math.round(bed.Position.Z/3)
			game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.DamageBlock:InvokeServer({
				["blockRef"] = {
					["blockPosition"] = Vector3.new(x,y,z)
				},
				["hitPosition"] = Vector3.new(x,y,z),
				["hitNormal"] = Vector3.new(x,y,z),
			})
		end
	end
end


local BNuker = Blatant:NewSection("BedNuker")
BNuker:NewToggle("BedNuker", "Auto break bed and covers", function(state)
	if state then
		BindToStepped("BedNuker", 1, function()
			nuker()
		end)
	else
		UnbindFromStepped("BedNuker")
	end
end)


local Infjump = Blatant:NewSection("InfJump")
Infjump:NewToggle("Infjump", "Allows you to hold space to fly up", function(state)
	if state then
		local InfJump = {["Enabled"] = true}
		connectioninfjump = uis.JumpRequest:connect(function(jump)
			if InfJump["Enabled"] then
				lplr.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
			end
		end)
	else
		connectioninfjump:Disconnect()
	end
end)


runcode(function()
	local wall = nil
	local spiderspeed = {["Value"] = 0}
	local Spider = Blatant:NewSection("Spider")
	Spider:NewToggle("Spider", "Allows you to climb up a wall", function(state)
		if state then
			BindToStepped("Spider", 1, function()
				local raycastparameters = RaycastParams.new()
				raycastparameters.FilterDescendantsInstances = {lplr.Character}
				local ray = workspace:Raycast(lplr.Character.Humanoid.LeftLeg.Position, lplr.Character.HumanoidRootPart.CFrame.LookVector * 1.3, raycastparameters)

				wall = ray and ray.Instance or nil
				if wall then
					lplr.Character.HumanoidRootPart.Velocity = Vector3.new(lplr.Character.HumanoidRootPart.Velocity.X or 0, spiderspeed["Value"], lplr.Character.HumanoidRootPart.Velocity.Z or 0)

					if lplr.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Climbing then
						lplr.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
					end
				end
			end)
		else
			UnbindFromStepped("Spider")
		end
	end)
	Spider:NewSlider("Speed", "Adjust spider speed", 100, 0, function(val) -- 500 (MaxValue) | 0 (MinValue)
		spiderspeed["Value"] = val
	end)
end)


local FixCam = Utility:NewSection("FixCam/RestoreCam")
FixCam:NewButton("FixCam", "fix camera bug on mobile", function()
	cam.CameraType = Enum.CameraType.Fixed
	cam.CameraType = Enum.CameraType.Custom
end)


runcode(function()
	local antivoidp
end)

local AntiVoid = World:NewSection("AntiVoid")
AntiVoid:NewToggle("AntiVoid", "Give's you a second chance to get back on land", function(state)
	if state then
		antivoidp = Instance.new("Part", workspace)
		antivoidp.Name = "AntiVoid"
		antivoidp.CanCollide = true
		antivoidp.Size = Vector3.new(2048, 1, 2048)
		antivoidp.Anchored = true
		antivoidp.Transparency = 1 - (antivoidtransparent["Value"] / 100)
		antivoidp.Material = Enum.Material.Neon
		antivoidp.Color = Color3.fromHSV(antivoidcolor["Hue"], antivoidcolor["Sat"], antivoidcolor["Value"])
		antivoidp.Position = Vector3.new(0, 23.5, 0)
		antivoidp.Touched:connect(function(touchedvoid)
			if touchedvoid.Parent:FindFirstChild("Humanoid") and touchedvoid.Parent.Name == lplr.Name then
				lplr.Character.Humanoid.Jump = true
				lplr.Character.Humanoid:ChangeState("Jumping")
				wait(0.2)
				lplr.Character.Humanoid:ChangeState("Jumping")
				wait(0.2)
				lplr.Character.Humanoid:ChangeState("Jumping")
			end
		end)
	else
		if antivoidp then
			antivoidp:Remove()
		end
	end
end)


AntiVoid:NewColorPicker("Color", "Adjust antivoid color", Color3.fromHSV(antivoidcolor["Hue"], antivoidcolor["Sat"], antivoidcolor["Value"]), function(val)
	if antivoidp then
		antivoidp.Color = (val)
	end
end)

AntiVoid:NewSlider("Invisible 1-100", "Adjust antivoid transparency", 100, 0, function(val)
	if antivoidp then
		antivoidp.Transparency = 1 - (val / 100)
	end
end)


local UI = UI:NewSection("Colors")
for theme, color in pairs(colors) do
	UI:NewColorPicker(theme, "Change your "..theme, color, function(color3)
		kavoUi:ChangeColor(theme, color3)
	end)
end
